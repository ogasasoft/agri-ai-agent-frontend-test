{
  "API Route Error Handler": {
    "prefix": "api-error-handler",
    "body": [
      "import { AuthErrorBuilder } from '@/lib/auth-error-details';",
      "import { DatabaseErrorBuilder, logDatabaseOperation } from '@/lib/api-error-details';",
      "",
      "export async function ${1:GET}(request: NextRequest) {",
      "  try {",
      "    // Session validation",
      "    const sessionToken = request.headers.get('x-session-token') || request.cookies.get('session_token')?.value;",
      "    if (!sessionToken) {",
      "      const authError = AuthErrorBuilder.sessionError('INVALID_SESSION');",
      "      return NextResponse.json(authError, { status: 401 });",
      "    }",
      "",
      "    const sessionData = await validateSession(sessionToken);",
      "    if (!sessionData) {",
      "      const authError = AuthErrorBuilder.sessionError('EXPIRED_SESSION', { token: sessionToken });",
      "      return NextResponse.json(authError, { status: 401 });",
      "    }",
      "",
      "    // Your business logic here",
      "    ${2:// Implementation}",
      "",
      "  } catch (error: any) {",
      "    logDatabaseOperation('${3:SELECT}', '${4:table}', false, { error: error.message }, sessionData?.user.id.toString());",
      "",
      "    const dbError = DatabaseErrorBuilder.queryError(",
      "      '${5:operation description}',",
      "      error,",
      "      {",
      "        table: '${4:table}',",
      "        operation: '${3:SELECT}',",
      "        userId: sessionData?.user.id.toString()",
      "      }",
      "    );",
      "",
      "    return NextResponse.json(dbError, { status: 500 });",
      "  }",
      "}"
    ],
    "description": "Template for API route with comprehensive error handling"
  },

  "React Component Error Handler": {
    "prefix": "react-error-handler",
    "body": [
      "import { useFormErrorHandler } from '@/hooks/useErrorHandler';",
      "import { ErrorBoundary } from '@/components/ErrorBoundary';",
      "",
      "export default function ${1:ComponentName}() {",
      "  const { handleSubmissionError, handleValidationError, errorDetails, isError } = ",
      "    useFormErrorHandler('${2:form-name}', { componentName: '${1:ComponentName}' });",
      "",
      "  const handleSubmit = async (formData: any) => {",
      "    try {",
      "      ${3:// API call implementation}",
      "    } catch (error) {",
      "      const errorDetails = handleSubmissionError(error, formData);",
      "      // Handle error display",
      "    }",
      "  };",
      "",
      "  return (",
      "    <ErrorBoundary>",
      "      <div>",
      "        {isError && (",
      "          <div className=\"bg-red-50 border border-red-200 rounded-md p-4 mb-4\">",
      "            <p className=\"text-red-800\">{errorDetails?.message}</p>",
      "            {errorDetails?.suggestions && (",
      "              <ul className=\"mt-2 text-sm text-red-600\">",
      "                {errorDetails.suggestions.map((suggestion: string, index: number) => (",
      "                  <li key={index}>• {suggestion}</li>",
      "                ))}",
      "              </ul>",
      "            )}",
      "          </div>",
      "        )}",
      "        ${4:// Component content}",
      "      </div>",
      "    </ErrorBoundary>",
      "  );",
      "}"
    ],
    "description": "React component template with error handling"
  },

  "Database Error Handler": {
    "prefix": "db-error-handler",
    "body": [
      "import { DatabaseErrorBuilder, logDatabaseOperation } from '@/lib/api-error-details';",
      "",
      "try {",
      "  const client = await getDbClient();",
      "  try {",
      "    const result = await client.query('${1:SQL_QUERY}', [${2:params}]);",
      "    ",
      "    logDatabaseOperation('${3:SELECT}', '${4:table_name}', true, { count: result.rows.length }, '${5:userId}');",
      "    ",
      "    return result.rows;",
      "  } finally {",
      "    await client.end();",
      "  }",
      "} catch (error: any) {",
      "  logDatabaseOperation('${3:SELECT}', '${4:table_name}', false, { error: error.message }, '${5:userId}');",
      "  ",
      "  const dbError = DatabaseErrorBuilder.queryError(",
      "    '${6:Query description}',",
      "    error,",
      "    {",
      "      table: '${4:table_name}',",
      "      operation: '${3:SELECT}',",
      "      userId: '${5:userId}'",
      "    }",
      "  );",
      "  ",
      "  throw new Error(JSON.stringify(dbError));",
      "}"
    ],
    "description": "Database operation with error handling template"
  },

  "Form Validation Error": {
    "prefix": "form-validation-error",
    "body": [
      "// Form validation with AI error analysis",
      "const validateForm = (formData: Record<string, any>) => {",
      "  const errors: Record<string, string[]> = {};",
      "",
      "  ${1:// Add validation rules}",
      "",
      "  if (Object.keys(errors).length > 0) {",
      "    const errorDetails = handleValidationError(errors, formData);",
      "    return errorDetails;",
      "  }",
      "",
      "  return null;",
      "};"
    ],
    "description": "Form validation with error handler"
  },

  "API Error Test": {
    "prefix": "api-error-test",
    "body": [
      "describe('${1:API} Error Handling', () => {",
      "  it('should return structured error for ${2:scenario}', async () => {",
      "    const response = await request(app)",
      "      .${3:post}('${4:/api/endpoint}')",
      "      .send(${5:invalidData});",
      "",
      "    expect(response.status).toBe(${6:400});",
      "    expect(response.body).toHaveProperty('success', false);",
      "    expect(response.body).toHaveProperty('message');",
      "    expect(response.body).toHaveProperty('error_code');",
      "    expect(response.body).toHaveProperty('suggestions');",
      "",
      "    if (process.env.NODE_ENV === 'development') {",
      "      expect(response.body).toHaveProperty('debug_info');",
      "    }",
      "  });",
      "",
      "  it('should log error details', async () => {",
      "    const logSpy = jest.spyOn(console, 'error');",
      "    ",
      "    await request(app)",
      "      .${3:post}('${4:/api/endpoint}')",
      "      .send(${5:invalidData});",
      "",
      "    expect(logSpy).toHaveBeenCalled();",
      "    logSpy.mockRestore();",
      "  });",
      "});"
    ],
    "description": "API error handling test template"
  },

  "External API Error Handler": {
    "prefix": "external-api-error",
    "body": [
      "import { ExternalAPIErrorBuilder, logExternalAPICall } from '@/lib/api-error-details';",
      "",
      "const startTime = Date.now();",
      "",
      "try {",
      "  const response = await fetch('${1:API_ENDPOINT}', {",
      "    method: '${2:POST}',",
      "    headers: {",
      "      'Content-Type': 'application/json',",
      "      ${3:// Additional headers}",
      "    },",
      "    body: JSON.stringify(${4:requestData})",
      "  });",
      "",
      "  const responseTime = Date.now() - startTime;",
      "",
      "  if (!response.ok) {",
      "    const errorData = await response.json().catch(() => ({}));",
      "    ",
      "    logExternalAPICall('${5:API_NAME}', '${1:API_ENDPOINT}', '${2:POST}', false, responseTime, response.status);",
      "    ",
      "    const apiError = ExternalAPIErrorBuilder.${6:openAIError}(",
      "      errorData,",
      "      {",
      "        apiName: '${5:API_NAME}',",
      "        endpoint: '${1:API_ENDPOINT}',",
      "        method: '${2:POST}',",
      "        statusCode: response.status,",
      "        responseTime",
      "      }",
      "    );",
      "    ",
      "    throw new Error(JSON.stringify(apiError));",
      "  }",
      "",
      "  logExternalAPICall('${5:API_NAME}', '${1:API_ENDPOINT}', '${2:POST}', true, responseTime, response.status);",
      "  ",
      "  return await response.json();",
      "",
      "} catch (error) {",
      "  // Handle network errors, etc.",
      "  const responseTime = Date.now() - startTime;",
      "  logExternalAPICall('${5:API_NAME}', '${1:API_ENDPOINT}', '${2:POST}', false, responseTime);",
      "  throw error;",
      "}"
    ],
    "description": "External API call with comprehensive error handling"
  },

  "Error Boundary Usage": {
    "prefix": "error-boundary-usage",
    "body": [
      "import { ErrorBoundary } from '@/components/ErrorBoundary';",
      "",
      "<ErrorBoundary",
      "  fallback={(error, errorInfo) => (",
      "    <div className=\"error-fallback\">",
      "      <h2>エラーが発生しました</h2>",
      "      <details>",
      "        <summary>詳細を表示</summary>",
      "        <pre>{error.message}</pre>",
      "      </details>",
      "    </div>",
      "  )}",
      ">",
      "  ${1:// Your component content}",
      "</ErrorBoundary>"
    ],
    "description": "Error Boundary wrapper with custom fallback"
  }
}